@page "/create-pet"
@rendermode InteractiveServer
@inject PetImageService ImageService
@inject PetStorageService PetStorageService
@inject NavigationManager Navigation

<div class="d-flex flex-column justify-content-center align-items-center text-center" style="min-height: 80vh;">
    <div style="width: 100%; max-width: 600px;">
        <h3>나만의 펫 만나기 (Meet Your Own Pet)</h3>

        @if (string.IsNullOrWhiteSpace(generatedImageUrl))
        {
            <p>원하는 펫을 자세히 묘사해주세요. 생성된 펫은 홈 화면에 나타납니다.</p>
            <textarea @bind="petDescription" placeholder="예: 꽃밭에서 놀고 있는 솜털같은 골든 리트리버 강아지" rows="4" class="w-100"></textarea>
            <button class="btn btn-primary mt-2 w-100" @onclick="GeneratePetImage" disabled="@isGenerating">
                @if (isGenerating)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>만드는 중...</span>
                }
                else
                {
                    <span>만나기 (Meet)</span>
                }
            </button>
        }
        else
        {
            <div class="mt-4">
                <h4>새로운 펫! (Your New Pet!)</h4>
                <img src="@generatedImageUrl" alt="Generated Pet Image" class="img-fluid rounded"
                    style="max-width: 512px; max-height: 512px;" />
            </div>

            <input @bind="petName" class="w-50" placeholder="이름" />
            <button class="btn btn-primary mt-2 w-100" @onclick="Adopt" disabled="@isGenerating">입양하기 (Adopt)</button>

            <button class="btn btn-primary mt-2 w-100" @onclick="Reset" disabled="@isGenerating">다시 만들기
                (Regenerate)</button>
        }

        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger mt-4" role="alert">
                @errorMessage
            </div>
        }
    </div>
</div>


@code {
    private string? petDescription;
    private string? generatedImageUrl;
    private bool isGenerating = false;
    private string? errorMessage;
    private string? petName;

    private async Task GeneratePetImage()
    {
        if (string.IsNullOrWhiteSpace(petDescription))
        {
            errorMessage = "펫에 대한 묘사를 입력해주세요.";
            return;
        }

        isGenerating = true;
        generatedImageUrl = null;
        errorMessage = null;

        try
        {
            generatedImageUrl = await ImageService.GenerateImageAsync(petDescription);
        }
        catch
        {
            // In a real app, log this exception
            errorMessage = "이미지 생성에 실패했습니다. 잠시 후 다시 시도해주세요.";
        }
        finally
        {
            isGenerating = false;
        }
    }

    private void Reset()
    {
        generatedImageUrl = null;
        errorMessage = null;
    }

    private void Adopt()
    {
        if (string.IsNullOrWhiteSpace(petName))
        {
            errorMessage = "펫의 이름을 지어주세요.";
            return;
        }

        var errorCode = PetStorageService.AddPet(petName, petDescription!, generatedImageUrl!);
        if (errorCode == ErrorCode.DuplicatePetName)
        {
            errorMessage = "이미 사용중인 이름입니다. 다른 이름을 지어주세요.";
            return;
        }

        Navigation.NavigateTo($"/pet/{petName}");
    }
}
