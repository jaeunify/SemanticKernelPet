@page "/pet"
@rendermode InteractiveServer

@inject SemanticKernelService.TextToTextService ChatService
@inject SemanticKernelService.TextToImageService ImageService

<div style="display: flex; flex-direction: column; justify-content: center; align-items: center; min-height: 100vh; text-align: center;">
    <h3>My Pet</h3>

    @if (!string.IsNullOrWhiteSpace(generatedImageUrl))
    {
        <div class="mt-4">
            <img src="@generatedImageUrl" alt="Generated Pet Image" class="img-fluid rounded" style="max-width: 512px; max-height: 512px;" />
        </div>
    }
    else if (isGenerating)
    {
        <div class="mt-4">
            <span class="spinner-border" role="status"></span>
            <span>Generating your pet...</span>
        </div>
    }


    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger mt-4" role="alert">
            @errorMessage
        </div>
    }

    <hr class="w-50" />

    <h3>Chat with your Pet</h3>
    <div class="d-flex justify-content-center w-100 mb-2">
        <input @bind="input" @onkeyup="Enter" class="w-50" placeholder="메시지" />
        <button @onclick="Send" class="btn btn-primary">Send</button>
    </div>

    <ul style="list-style-type: none; padding: 0;">
    @foreach (var m in ChatService.GetHistory())
    {
        <li><b>@m.Role</b>: @m.Content</li>
    }
    </ul>
</div>

@code {
    private string? input = "My pet is upset because I forgot to feed it. Pick only one function.";
    private string? generatedImageUrl;
    private string? errorMessage;
    private bool isGenerating = false;

    protected override async Task OnInitializedAsync()
    {
        var petDescription = "A cute, fluffy, white cat sitting on a comfortable cushion.";

        isGenerating = true;
        try
        {
            generatedImageUrl = await ImageService.GenerateImageAsync(petDescription);
        }
        catch
        {
            errorMessage = "Failed to generate pet image. Please try again later.";
        }
        finally
        {
            isGenerating = false;
        }
    }

    private async Task Send()
    {
        if (!string.IsNullOrWhiteSpace(input))
        {
            await ChatService.SendAsync(input);
            input = string.Empty;
        }
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Send();
        }
    }
}
